{
  "uid" : "21a310b7c9152542",
  "name" : "test_login[casedata0]",
  "fullName" : "testCase.test_login.Test_login#test_login",
  "historyId" : "9e54f0f5961ee2a0eb6043221697b907",
  "time" : {
    "start" : 1652169577636,
    "stop" : 1652169577702,
    "duration" : 66
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '帐号或密码输入错误' == 'aasuccess1'\n  - aasuccess1\n  + 帐号或密码输入错误",
  "statusTrace" : "self = <test_login.Test_login object at 0x1037c3640>\ncasedata = {'channel': 'PC', 'description': '验证某某账号是否正常', 'password': '/XrJ0I8kCO6JZ6rxmTpvmg==', 'userCode': 'liuxl2', ...}\n\n    @allure.story(\"登录接口\")\n    @pytest.mark.parametrize('casedata', yaml.safe_load(open(\"data/login_data.yaml\")))\n    def test_login(self,casedata):\n        self.casedata=casedata\n        self.data = CommonTemplate().template(\"api/login.yaml\", self.casedata)\n        self.r=self.getResponse(self.data)\n        # 获取用例标题和测试用例描述\n        description = casedata.get(\"description\")\n        uri = Handle_yaml(\"api/login.yaml\").get_uri()\n        try:\n            expected_errMsg=self.casedata.get(\"veryfi\").get(\"errMsg\")\n            assert (self.r.json()[\"errMsg\"] == expected_errMsg)\n            normal_logger.info(uri+\"的\"+description+\"用例执行成功\")\n        except AssertionError as e:\n            error_logger.error(uri+\"的\"+description+\"用例执行失败:{}\".format(e))\n>           raise e\n\ntestCase/test_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_login.Test_login object at 0x1037c3640>\ncasedata = {'channel': 'PC', 'description': '验证某某账号是否正常', 'password': '/XrJ0I8kCO6JZ6rxmTpvmg==', 'userCode': 'liuxl2', ...}\n\n    @allure.story(\"登录接口\")\n    @pytest.mark.parametrize('casedata', yaml.safe_load(open(\"data/login_data.yaml\")))\n    def test_login(self,casedata):\n        self.casedata=casedata\n        self.data = CommonTemplate().template(\"api/login.yaml\", self.casedata)\n        self.r=self.getResponse(self.data)\n        # 获取用例标题和测试用例描述\n        description = casedata.get(\"description\")\n        uri = Handle_yaml(\"api/login.yaml\").get_uri()\n        try:\n            expected_errMsg=self.casedata.get(\"veryfi\").get(\"errMsg\")\n>           assert (self.r.json()[\"errMsg\"] == expected_errMsg)\nE           AssertionError: assert '帐号或密码输入错误' == 'aasuccess1'\nE             - aasuccess1\nE             + 帐号或密码输入错误\n\ntestCase/test_login.py:31: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_xunit_setup_method_fixture_Test_login",
    "time" : {
      "start" : 1652169577632,
      "stop" : 1652169577633,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '帐号或密码输入错误' == 'aasuccess1'\n  - aasuccess1\n  + 帐号或密码输入错误",
    "statusTrace" : "self = <test_login.Test_login object at 0x1037c3640>\ncasedata = {'channel': 'PC', 'description': '验证某某账号是否正常', 'password': '/XrJ0I8kCO6JZ6rxmTpvmg==', 'userCode': 'liuxl2', ...}\n\n    @allure.story(\"登录接口\")\n    @pytest.mark.parametrize('casedata', yaml.safe_load(open(\"data/login_data.yaml\")))\n    def test_login(self,casedata):\n        self.casedata=casedata\n        self.data = CommonTemplate().template(\"api/login.yaml\", self.casedata)\n        self.r=self.getResponse(self.data)\n        # 获取用例标题和测试用例描述\n        description = casedata.get(\"description\")\n        uri = Handle_yaml(\"api/login.yaml\").get_uri()\n        try:\n            expected_errMsg=self.casedata.get(\"veryfi\").get(\"errMsg\")\n            assert (self.r.json()[\"errMsg\"] == expected_errMsg)\n            normal_logger.info(uri+\"的\"+description+\"用例执行成功\")\n        except AssertionError as e:\n            error_logger.error(uri+\"的\"+description+\"用例执行失败:{}\".format(e))\n>           raise e\n\ntestCase/test_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_login.Test_login object at 0x1037c3640>\ncasedata = {'channel': 'PC', 'description': '验证某某账号是否正常', 'password': '/XrJ0I8kCO6JZ6rxmTpvmg==', 'userCode': 'liuxl2', ...}\n\n    @allure.story(\"登录接口\")\n    @pytest.mark.parametrize('casedata', yaml.safe_load(open(\"data/login_data.yaml\")))\n    def test_login(self,casedata):\n        self.casedata=casedata\n        self.data = CommonTemplate().template(\"api/login.yaml\", self.casedata)\n        self.r=self.getResponse(self.data)\n        # 获取用例标题和测试用例描述\n        description = casedata.get(\"description\")\n        uri = Handle_yaml(\"api/login.yaml\").get_uri()\n        try:\n            expected_errMsg=self.casedata.get(\"veryfi\").get(\"errMsg\")\n>           assert (self.r.json()[\"errMsg\"] == expected_errMsg)\nE           AssertionError: assert '帐号或密码输入错误' == 'aasuccess1'\nE             - aasuccess1\nE             + 帐号或密码输入错误\n\ntestCase/test_login.py:31: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9f1e70be472e2445",
      "name" : "stdout",
      "source" : "9f1e70be472e2445.txt",
      "type" : "text/plain",
      "size" : 26
    }, {
      "uid" : "9f355083cacc80f2",
      "name" : "stderr",
      "source" : "9f355083cacc80f2.txt",
      "type" : "text/plain",
      "size" : 227
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_Test_login::0",
    "time" : {
      "start" : 1652169577829,
      "stop" : 1652169577829,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试登录退出模块"
  }, {
    "name" : "story",
    "value" : "登录接口"
  }, {
    "name" : "parentSuite",
    "value" : "testCase"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "Test_login"
  }, {
    "name" : "host",
    "value" : "kongdeMacBook-Air.local"
  }, {
    "name" : "thread",
    "value" : "5409-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCase.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casedata",
    "value" : "{'channel': 'PC', 'password': '/XrJ0I8kCO6JZ6rxmTpvmg==', 'userCode': 'liuxl2', 'veryfi': {'errMsg': 'aasuccess1'}, 'description': '验证某某账号是否正常'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "21a310b7c9152542.json",
  "parameterValues" : [ "{'channel': 'PC', 'password': '/XrJ0I8kCO6JZ6rxmTpvmg==', 'userCode': 'liuxl2', 'veryfi': {'errMsg': 'aasuccess1'}, 'description': '验证某某账号是否正常'}" ]
}